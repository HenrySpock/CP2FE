import React, { useEffect, useState, useContext } from 'react';

import '../../App.css';
import { UserContext } from '../user/UserContext';  // Adjust the path to your UserContext file accordingly

import L from 'leaflet';
import 'leaflet/dist/leaflet.css';  
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';

import CustomMarkers from './CustomMarkers';
import { useNavigate } from 'react-router-dom';

// Create a TravelogEntryCard component to display individual travelog entries
function TravelogEntryCard({ travelog }) {
  const navigate = useNavigate();  // Import useNavigate from 'react-router-dom'

  const handleTravelogClick = () => { 
    navigate(`/trav_det/${travelog.travelogId}`);
  };
  
  return (
      <div className="travelog-entry-card" onClick={handleTravelogClick}>
          <div>{travelog.title}</div>
          <div>{travelog.User.username}</div>
          <div>{new Date(travelog.date_visited).toISOString().split('T')[0]}</div>
      </div>
  );
}

// Create a CountryCard component to manage the expanded/contracted state of the travelog entries for each country
// function CountryCard({ country, travelogs, isExpanded, onExpand }) {
//   return (
//       <div className={`country-card ${isExpanded ? 'expanded' : ''}`} onClick={() => onExpand(country)}>
//           <div className="country-title">{country}</div>
//           {isExpanded && travelogs.map(travelog => (
//               <TravelogEntryCard key={travelog.travelog_id} travelog={travelog} />
//           ))}
//       </div>
//   );
// }
function CountryCard({ country, travelogs, isExpanded, onExpand }) {
  return (
      <div className={`country-card ${isExpanded ? 'expanded' : ''}`}>
          <div className="country-title" onClick={() => onExpand(country)}>{country}</div> {/* Move onClick here */}
          {isExpanded && travelogs.map(travelog => (
              <TravelogEntryCard key={travelog.travelogId} travelog={travelog} />
          ))}
      </div>
  );
}

function Home() {
  const [isCountryView, setIsCountryView] = useState(true);
  const handleToggle = () => {
      setIsCountryView(!isCountryView);
  };
  // const mapRef = useRef();
  const { user } = useContext(UserContext);  // Access user data from UserContext
  const [travelogEntries, setTravelogEntries] = useState([]);
  const mapOptions = {
    center: [ 49.6322, 12.4628], 
    zoom: 4,  
    minZoom: 2,
    maxZoom: 18,
  };
  const worldBounds = [
    [-90, -180], 
    [90, 180]    
  ];

  const offsetAmount = 0.0006;

  function areClose(entry1, entry2) {
    return Math.abs(entry1.latitude - entry2.latitude) < offsetAmount && Math.abs(entry1.longitude - entry2.longitude) < offsetAmount;
  }

  function applyOffset(coord) {
    return coord + (Math.random() - 0.7) * offsetAmount;
  }

  const [recentTravelogs, setRecentTravelogs] = useState([]);

  useEffect(() => {
      async function fetchTravelogEntries() {
          // your existing fetch logic
          const response = await fetch('http://localhost:5000/api/travelog-entries');
          if (response.ok) {
              const data = await response.json();
              // Assuming entries are sorted by date, take the first 3 entries for the recent list
              const recentEntries = data.slice(0, 5);
              setRecentTravelogs(recentEntries);
              // Use all entries for the map
              setTravelogEntries(data);
          }
      }
      fetchTravelogEntries();
  }, []);

  function TravelogCard({ travelog }) {
    const navigate = useNavigate();

  //   return (
  //       <div className="travelog-card" onClick={() => {
  //           if(user) {
  //               navigate(`/trav_det/${travelog.travelogId}`);
  //           } else {
  //               navigate('/auth');
  //           }
  //       }}>
  //           <img 
  //               src={travelog.Images[0]?.image_url} 
  //               alt={travelog.title} 
  //               className="travelog-image" 
  //           />
  //           <h3 className="travelog-title">{travelog.title}</h3>
  //       </div>
  //     );
  return (
    <div className="travelog-card" onClick={() => {
          if(user) {
              navigate(`/trav_det/${travelog.travelogId}`);
          } else {
              navigate('/auth');
          }
      }}>
          <div className="travelog-image-container">
              <img 
                  src={travelog.Images[0]?.image_url} 
                  alt={travelog.title} 
                  className="travelog-image" 
              />
          </div>
          <h3 className="travelog-title">{travelog.title}</h3>
      </div>
    );

  }



  useEffect(() => {
      async function fetchTravelogEntries() {
          try {
              const response = await fetch('http://localhost:5000/api/travelog-entries');
              if (response.ok) {
                  let data = await response.json();
                  console.log("Fetched Data:", data);

                  // Apply offset logic to data before setting the state
                  const offsetEntries = data.map((entry, index) => {
                    let newEntry = { ...entry };
                    for (let i = 0; i < index; i++) {
                      if (areClose(newEntry, data[i])) {
                        newEntry.latitude = applyOffset(newEntry.latitude);
                        newEntry.longitude = applyOffset(newEntry.longitude);
                      }
                    }
                    return newEntry;
                  });

                  setTravelogEntries(offsetEntries);
              } else {
                  console.error("Failed to fetch travelog entries:", response.statusText);
              }
          } catch (error) {
              console.error("Error fetching travelog entries:", error);
          }
      }
      
      fetchTravelogEntries();
  }, []);

  // Organize travelog entries by country
  const travelogsByCountry = {};
  travelogEntries.forEach(travelog => {
      if (!travelogsByCountry[travelog.country]) {
          travelogsByCountry[travelog.country] = [];
      }
      travelogsByCountry[travelog.country].push(travelog);
  });

  // Manage the expanded/contracted state of the CountryCards
  const [expandedCountry, setExpandedCountry] = useState(null);

  const handleExpand = (country) => {
      setExpandedCountry(expandedCountry === country ? null : country);
  };

  return (
    <div className='Home'>
      <h2>
        {user ? `Welcome to Castle Tracker, ${user.firstName}!` : 'Welcome to Castle Tracker!'}
      </h2>
      <div className="recent-travelogs">
          {recentTravelogs.map(travelog => (
              <TravelogCard key={travelog.travelogId} travelog={travelog} />
          ))}
      </div>
      <div className="map-container">
      <MapContainer {...mapOptions} worldCopyJump={true} maxBounds={worldBounds}>
      
          <TileLayer
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
              attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />
          <CustomMarkers entries={travelogEntries} />
      </MapContainer>
      </div>
      <button onClick={handleToggle}>
          {isCountryView ? 'Switch to List View' : 'Switch to Country View'}
      </button>
      <div className="view-container">
    {isCountryView ? (
            <div className="country-cards">
                {Object.keys(travelogsByCountry).sort().map(country => (
                    <CountryCard
                        key={country}
                        country={country}
                        travelogs={travelogsByCountry[country]}
                        isExpanded={expandedCountry === country}
                        onExpand={handleExpand}
                    />
                ))}
            </div>
        ) : (
            <div className="all-travelogs-list">
                
                {travelogEntries.map(travelog => (
                    <TravelogCard key={travelog.travelogId} travelog={travelog} />
                ))}
            </div>
        )}
    </div>
    </div>
    
  );
  
}

export default Home;

{/* <div className="view-container">
    {isCountryView ? (
        <div className="country-cards">
            {Object.keys(travelogsByCountry).sort().map(country => (
                <CountryCard
                    key={country}
                    country={country}
                    travelogs={travelogsByCountry[country]}
                    isExpanded={expandedCountry === country}
                    onExpand={handleExpand}
                />
            ))}
        </div>
    ) : (
        <div className="all-travelogs-list">
            ...new logic to render all travelogs ordered by most recent...
            {travelogEntries.map(travelog => (
                <TravelogCard key={travelog.travelogId} travelog={travelog} />
            ))}
        </div>
    )}
</div> */}


{/* <div className="country-cards">
{Object.keys(travelogsByCountry).sort().map(country => (
    <CountryCard
        key={country}
        country={country}
        travelogs={travelogsByCountry[country]}
        isExpanded={expandedCountry === country}
        onExpand={handleExpand}
    />
))}
</div> */}