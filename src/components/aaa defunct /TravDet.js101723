import React, { useState, useEffect, useContext } from 'react';
import { useParams } from 'react-router-dom';  
import axios from 'axios';
import { UserContext } from '../user/UserContext';
import { useNavigate } from 'react-router-dom';

function TravDet() {
  const [travelog, setTravelog] = useState(null);
  const { id: travelogId } = useParams();  // Get the travelog_id from the URL using useParams 
  const { user: currentUser } = useContext(UserContext);  // Corrected from { currentUser } to { user: currentUser }
  console.log('Current User for travdet: ', currentUser); 
  // const formattedDate = new Date(travelog.dateVisited).toLocaleDateString('en-CA'); 
  const [isEditMode, setIsEditMode] = useState(false);
  const [editedTravelog, setEditedTravelog] = useState(null);

  const [images, setImages] = useState([]);
  const [isEditImagesMode, setIsEditImagesMode] = useState(false);
  const [displayImages, setDisplayImages] = useState(images);
  const [isDeleteConfirmVisible, setIsDeleteConfirmVisible] = useState(false);

  const navigate = useNavigate();

  // const updateImageUrl = (index, url) => {
  //   const updatedImages = [...images];
  //   updatedImages[index].url = url;
  //   setImages(updatedImages);
  // };

  const updateImageUrl = (index, url) => {
    const updatedImages = [...images];
    updatedImages[index].image_url = url;  // Update image_url instead of url
    setImages(updatedImages);
  };
  

  // const removeImage = (index) => {
  //   const updatedImages = [...images];
  //   updatedImages.splice(index, 1); 
  //   setImages(updatedImages);
  // };

  // const removeImage = (index) => {
  //     const updatedImages = images.map((image, i) => {
  //         if (i === index) {
  //             return { ...image, delete: true };
  //         }
  //         return image;
  //     });
  //     setImages(updatedImages);
  // };

  // const removeImage = (index) => {
  //     const updatedImages = images.map((image, i) => {
  //         if (i === index) {
  //             return { ...image, delete: true };
  //         }
  //         return image;
  //     });
  //     setImages(updatedImages);

  //     // Also update the displayImages array to remove the deleted image
  //     const updatedDisplayImages = [...displayImages];
  //     updatedDisplayImages.splice(index, 1);
  //     setDisplayImages(updatedDisplayImages);
  // };

  // const removeImage = (index) => {
  //   const updatedImages = images.map((image, i) => {
  //     if (i === index) {
  //       return { ...image, delete: true };
  //     }
  //     return image;
  //   });
  //   setImages(updatedImages);
  // };

  const removeImage = (index) => {
    const updatedImages = images.map((image, i) => {
      if (i === index) {
        return { ...image, delete: true };
      }
      return image;
    });
    setImages(updatedImages);
  
    // Also update the displayImages state to remove the deleted image
    const updatedDisplayImages = updatedImages.filter(image => !image.delete);
    setDisplayImages(updatedDisplayImages);
  };

  // const addImage = () => {
  //   setImages([...images, { url: '' }]);
  // };

  const addImage = () => {
    setImages([...images, { image_url: '' }]);
  };

  const saveImages = async () => {
    try {
      console.log('Images data being sent:', JSON.stringify({ images }));  // Log the data being sent
      console.log('Updated images:', JSON.stringify({ images }, null, 2));
      const response = await fetch(`http://localhost:5000/api/travelog/${travelogId}/images`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ images }),
      });
  
      console.log('Raw response:', response);  // Log the raw response
      
      if (!response.ok) {
        throw new Error(`Network response was not ok ${response.statusText}`);
      }
  
      const responseData = await response.json();
      console.log('Parsed response data:', responseData);  // Log the parsed response data
      
      console.log('Images updated successfully:', responseData);
      setIsEditImagesMode(false);  // Optionally reset the edit mode
      fetchTravelog(); 
    } catch (error) {
      console.error('Error saving images:', error);  // Log any errors
    }
  };
  
  const handleDeleteTravelog = async () => {
    try {
      const response = await axios.delete(`http://localhost:5000/api/travelog/${travelogId}`);
      console.log('Delete successful:', response.data);
      navigate('/');  // Navigate back to the home page
    } catch (error) {
      console.error('Error deleting travelog:', error);
    }
  };
  // useEffect(() => {
  //   const fetchTravelog = async () => {
  //     try {
  //       const response = await axios.get(`http://localhost:5000/api/travelog/${travelogId}`);
  //       setTravelog(response.data);
  //     } catch (error) {
  //       console.error('Error fetching travelog:', error);
  //     }
  //   };
  //   fetchTravelog();
  // }, [travelogId]);

  useEffect(() => {
    // Filter out any images marked for deletion
    const updatedDisplayImages = images.filter(image => !image.delete);
    setDisplayImages(updatedDisplayImages);
  }, [images]);

  // useEffect(() => {
  //   const fetchTravelog = async () => {
  //     try {
  //       const response = await axios.get(`http://localhost:5000/api/travelog/${travelogId}`);
  //       setTravelog(response.data);
  //       setImages(response.data.Images);  // Update images state with fetched data
  //     } catch (error) {
  //       console.error('Error fetching travelog:', error);
  //     }
  //   };
  //   fetchTravelog();
  // }, [travelogId]);

  const fetchTravelog = async () => {
    try {
      const response = await axios.get(`http://localhost:5000/api/travelog/${travelogId}`);
      setTravelog(response.data);
      setImages(response.data.Images);  // Update images state with fetched data
    } catch (error) {
      console.error('Error fetching travelog:', error);
    }
  };

  useEffect(() => {
    fetchTravelog();  // This will still run whenever travelogId changes
  }, [travelogId]);

  useEffect(() => {
    if (travelog) {
        setEditedTravelog({ ...travelog });
    }
  }, [travelog]);

  const handleUpdate = async () => {
    try {
      const response = await axios.patch(`http://localhost:5000/api/travelog/${travelogId}`, editedTravelog);
      console.log('Update successful:', response.data);
      setTravelog(editedTravelog);  // Update the displayed travelog data.
      setIsEditMode(false);  // Exit edit mode.
    } catch (error) {
      console.error('Error updating travelog:', error);
    }
  };

  // return (
  //   <div>
  //     {travelog ? (
  //       <>
  //         <h1>{travelog.title}</h1>
  //         <p>Site: {travelog.site}</p>
  //         <p>Country: {travelog.country}</p>
  //         <p>State: {travelog.state}</p>
  //         <p>City: {travelog.city}</p>
  //         <p>Address: {travelog.address}</p>
  //         <p>Phone: {travelog.phoneNumber}</p>
  //         <p>Date Visited: {new Date(travelog.dateVisited).toLocaleDateString('en-CA')}</p>
  //         <p>Is Private: {travelog.isPrivate ? 'Yes' : 'No'}</p>
  //         <p>Latitude: {travelog.latitude}</p>
  //         <p>Longitude: {travelog.longitude}</p>
  //         <div>Travelog Entry: {travelog.textBody}</div>
  //         {currentUser && currentUser.username === travelog.User.username && (
  //           <button onClick={() => setIsEditMode(!isEditMode)}>Edit Travelog</button>
  //         )}
  //         <div>
  //           {travelog.Images.map((image, index) => (
  //             <img key={index} src={image.image_url} alt={`Image ${index + 1}`} />
  //           ))}
  //         </div>
  //         {/* Show 'Edit Travelog' button if the current user is the author */}
  //         { /* Assume currentUser is available in your component or context */ }

  //       </>
  //     ) : (
  //       <p>Loading...</p>
  //     )}
  //   </div>
  // );

  const cancelEdit = () => {
      setEditedTravelog({ ...travelog });
      setIsEditMode(false);
  };

  const cancelEditImages = () => {
      setImages(travelog.Images);
      setIsEditImagesMode(false);
  };

  return (
    <div>
        {travelog ? (
            <>
                {isEditMode ? (
                    <div>
                        <input
                            type="text"
                            value={editedTravelog.title}
                            onChange={e => setEditedTravelog({ ...editedTravelog, title: e.target.value })}
                        />
                        <input
                            type="text"
                            value={editedTravelog.site}
                            onChange={e => setEditedTravelog({ ...editedTravelog, site: e.target.value })}
                        />
                        <input
                            type="text"
                            value={editedTravelog.country}
                            onChange={e => setEditedTravelog({ ...editedTravelog, country: e.target.value })}
                        />
                        <input
                            type="text"
                            value={editedTravelog.state}
                            onChange={e => setEditedTravelog({ ...editedTravelog, state: e.target.value })}
                        />
                        <input
                            type="text"
                            value={editedTravelog.city}
                            onChange={e => setEditedTravelog({ ...editedTravelog, city: e.target.value })}
                        />
                        <input
                            type="text"
                            value={editedTravelog.address}
                            onChange={e => setEditedTravelog({ ...editedTravelog, address: e.target.value })}
                        />
                        <input
                            type="text"
                            value={editedTravelog.phoneNumber}
                            onChange={e => setEditedTravelog({ ...editedTravelog, phoneNumber: e.target.value })}
                        />
                        <input
                            type="date"
                            value={editedTravelog.dateVisited}
                            onChange={e => setEditedTravelog({ ...editedTravelog, dateVisited: e.target.value })}
                        />
                        <input
                            type="checkbox"
                            checked={editedTravelog.isPrivate}
                            onChange={e => setEditedTravelog({ ...editedTravelog, isPrivate: e.target.checked })}
                        />
                        <textarea
                            value={editedTravelog.textBody}
                            onChange={e => setEditedTravelog({ ...editedTravelog, textBody: e.target.value })}
                        />
                        <button onClick={handleUpdate}>Save Changes</button>
                        <button onClick={cancelEdit}>Cancel</button>  
                    </div>
                ) : (
                    <div>
                        <h1>{travelog.title}</h1>
                        <p>Site: {travelog.site}</p>
                        <p>Country: {travelog.country}</p>
                        <p>State: {travelog.state}</p>
                        <p>City: {travelog.city}</p>
                        <p>Address: {travelog.address}</p>
                        <p>Phone: {travelog.phoneNumber}</p>
                        <p>Date Visited: {new Date(travelog.dateVisited).toLocaleDateString('en-CA')}</p>
                        <p>Is Private: {travelog.isPrivate ? 'Yes' : 'No'}</p>
                        <p>Latitude: {travelog.latitude}</p>
                        <p>Longitude: {travelog.longitude}</p>
                        <div>Travelog Entry: {travelog.textBody}</div>
                        {currentUser && currentUser.username === travelog.User.username && (
                            <button onClick={() => travelog && setIsEditMode(!isEditMode)}>Edit Travelog</button>
                        )}
                        {/* <div>
                            {travelog.Images.map((image, index) => (
                                <img key={index} src={image.image_url} alt={`Image ${index + 1}`} />
                            ))}
                        </div> */}
                        {/* <button onClick={isEditImagesMode ? saveImages : () => setIsEditImagesMode(true)}>
                          {isEditImagesMode ? 'Save Images' : 'Edit Images'}
                        </button> */}
                        <div>
                            {isEditImagesMode ? (
                                <div>
                                    {displayImages.map((image, index) => (
                                        <div key={index}>
                                            {/* Input field to update image URL */}
                                            <input
                                                type="text"
                                                value={image.image_url}
                                                onChange={e => updateImageUrl(index, e.target.value)}
                                            />
                                            {/* Delete button */}
                                            <button onClick={() => removeImage(index)}>Delete</button>

                                            {/* Conditionally display the image */}
                                            {image.image_url && (
                                                <img src={image.image_url} alt={`Image ${index + 1}`} />
                                            )}
                                        </div>
                                    ))}
                                    <button onClick={addImage}>Add Image</button>
                                    
                                </div> 
                                
                            ) : (
                                <div>
                                    {travelog.Images.map((image, index) => (
                                        <img key={index} src={image.image_url} alt={`Image ${index + 1}`} />
                                    ))}
                                    
                                </div>
                                
                            )}
                        </div>

                        <button onClick={isEditImagesMode ? saveImages : () => setIsEditImagesMode(true)}>
                            {isEditImagesMode ? 'Save Images' : 'Edit Images'}
                        </button>
                        {isEditImagesMode && (
                            <button onClick={cancelEditImages}>Cancel</button>  
                        )}

                        {currentUser && currentUser.username === travelog.User.username && (
                          <>
                            <button onClick={() => setIsDeleteConfirmVisible(true)}>Delete Travelog</button>
                            {isDeleteConfirmVisible && (
                              <div>
                                <p>Are you sure you want to delete this travelog?</p>
                                <button onClick={handleDeleteTravelog}>Yes, Delete</button>
                                <button onClick={() => setIsDeleteConfirmVisible(false)}>Cancel</button>
                              </div>
                            )}
                          </>
                        )}

                    </div>
                    
                )}
            </>
        ) : (
            <p>Loading...</p>
        )}
    </div>
);

}

export default TravDet;
 

// {images.map((image, index) => (
//   image.url && <img key={index} src={image.url} alt={`Image ${index + 1}`} />
// ))}


// <img key={index} src={image.url} alt={`Image ${index + 1}`} />
 
 


 

